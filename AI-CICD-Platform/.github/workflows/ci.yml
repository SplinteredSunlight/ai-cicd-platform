name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Dashboard Tests and Build
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/frontend-dashboard
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: services/frontend-dashboard/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint code
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --coverage
    
    - name: Build
      run: npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: services/frontend-dashboard/coverage
        flags: frontend
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: services/frontend-dashboard/dist
  
  # API Gateway Tests
  api-gateway:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/api-gateway
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: services/api-gateway/requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test with pytest
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/api-gateway/coverage.xml
        flags: api-gateway
  
  # AI Pipeline Generator Tests
  ai-pipeline-generator:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/ai-pipeline-generator
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: services/ai-pipeline-generator/requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test with pytest
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/ai-pipeline-generator/coverage.xml
        flags: ai-pipeline-generator
  
  # Security Enforcement Tests
  security-enforcement:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/security-enforcement
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: services/security-enforcement/requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test with pytest
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/security-enforcement/coverage.xml
        flags: security-enforcement
  
  # Self-Healing Debugger Tests
  self-healing-debugger:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/self-healing-debugger
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: services/self-healing-debugger/requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        pip install -r requirements.txt
        pip install -e .
    
    - name: Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test with pytest
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/self-healing-debugger/coverage.xml
        flags: self-healing-debugger

  # Docker Compose Validation
  docker-compose-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate docker-compose.yml
      run: docker-compose config
    
    - name: Check Docker images for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'docker-compose.yml'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Integration Test
  integration:
    needs: [frontend, api-gateway, ai-pipeline-generator, security-enforcement, self-healing-debugger]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Start services with Docker Compose
      run: |
        # Create dummy .env files from examples
        find services -name ".env.example" -exec sh -c 'cp "$1" "${1%.example}"' _ {} \;
        
        # Start services in detached mode
        docker-compose up -d
    
    - name: Wait for services to be ready
      run: |
        # Wait for API Gateway to be ready
        timeout 60s bash -c 'until curl -s http://localhost:8000/health | grep -q "ok"; do sleep 1; done'
    
    - name: Run integration tests
      run: |
        # Add integration tests here when they are implemented
        echo "Integration tests would run here"
    
    - name: Stop services
      run: docker-compose down
