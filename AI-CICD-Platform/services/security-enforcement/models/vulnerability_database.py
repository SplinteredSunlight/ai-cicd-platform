from enum import Enum
from typing import List, Dict, Any, Optional
from datetime import datetime
import uuid

from .vulnerability import SeverityLevel

class VulnerabilityStatus(str, Enum):
    """
    Status of a vulnerability
    """
    OPEN = "OPEN"  # Vulnerability is open and needs to be addressed
    FIXED = "FIXED"  # Vulnerability has been fixed
    IN_PROGRESS = "IN_PROGRESS"  # Vulnerability is being addressed
    WONT_FIX = "WONT_FIX"  # Vulnerability won't be fixed (e.g., false positive)
    DEFERRED = "DEFERRED"  # Vulnerability fix is deferred
    DUPLICATE = "DUPLICATE"  # Vulnerability is a duplicate of another
    NOT_AFFECTED = "NOT_AFFECTED"  # System is not affected by the vulnerability

class VulnerabilitySource(str, Enum):
    """
    Source of a vulnerability
    """
    NVD = "NVD"  # National Vulnerability Database
    GITHUB = "GITHUB"  # GitHub Security Advisories
    SNYK = "SNYK"  # Snyk Vulnerability Database
    OWASP = "OWASP"  # OWASP Top 10
    INTERNAL = "INTERNAL"  # Internal vulnerability database
    CUSTOM = "CUSTOM"  # Custom vulnerability source

class VulnerabilityDatabaseEntry:
    """
    An entry in the vulnerability database
    """
    def __init__(
        self,
        id: str,
        title: str,
        description: str,
        severity: SeverityLevel,
        status: VulnerabilityStatus = VulnerabilityStatus.OPEN,
        cvss_score: Optional[float] = None,
        cve_id: Optional[str] = None,
        affected_components: Optional[List[str]] = None,
        affected_versions: Optional[List[str]] = None,
        fixed_versions: Optional[List[str]] = None,
        references: Optional[List[str]] = None,
        remediation_advice: Optional[str] = None,
        source: Optional[VulnerabilitySource] = None,
        published_at: Optional[datetime] = None,
        updated_at: Optional[datetime] = None,
        metadata: Optional[Dict[str, Any]] = None
    ):
        self.id = id
        self.title = title
        self.description = description
        self.severity = severity
        self.status = status
        self.cvss_score = cvss_score
        self.cve_id = cve_id
        self.affected_components = affected_components or []
        self.affected_versions = affected_versions or []
        self.fixed_versions = fixed_versions or []
        self.references = references or []
        self.remediation_advice = remediation_advice
        self.source = source or VulnerabilitySource.INTERNAL
        self.published_at = published_at or datetime.utcnow()
        self.updated_at = updated_at or self.published_at
        self.metadata = metadata or {}
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
            "severity": self.severity.value,
            "status": self.status.value,
            "cvss_score": self.cvss_score,
            "cve_id": self.cve_id,
            "affected_components": self.affected_components,
            "affected_versions": self.affected_versions,
            "fixed_versions": self.fixed_versions,
            "references": self.references,
            "remediation_advice": self.remediation_advice,
            "source": self.source.value,
            "published_at": self.published_at.isoformat(),
            "updated_at": self.updated_at.isoformat(),
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'VulnerabilityDatabaseEntry':
        """
        Create from dictionary
        """
        return cls(
            id=data["id"],
            title=data["title"],
            description=data["description"],
            severity=SeverityLevel(data["severity"]),
            status=VulnerabilityStatus(data["status"]),
            cvss_score=data.get("cvss_score"),
            cve_id=data.get("cve_id"),
            affected_components=data.get("affected_components", []),
            affected_versions=data.get("affected_versions", []),
            fixed_versions=data.get("fixed_versions", []),
            references=data.get("references", []),
            remediation_advice=data.get("remediation_advice"),
            source=VulnerabilitySource(data["source"]) if "source" in data else None,
            published_at=datetime.fromisoformat(data["published_at"]),
            updated_at=datetime.fromisoformat(data["updated_at"]),
            metadata=data.get("metadata", {})
        )

class VulnerabilityDatabaseQuery:
    """
    A query for the vulnerability database
    """
    def __init__(
        self,
        cve_id: Optional[str] = None,
        component: Optional[str] = None,
        severity: Optional[List[SeverityLevel]] = None,
        status: Optional[List[VulnerabilityStatus]] = None,
        source: Optional[List[VulnerabilitySource]] = None,
        text_search: Optional[str] = None,
        limit: int = 100,
        offset: int = 0
    ):
        self.cve_id = cve_id
        self.component = component
        self.severity = severity or []
        self.status = status or []
        self.source = source or []
        self.text_search = text_search
        self.limit = limit
        self.offset = offset
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "cve_id": self.cve_id,
            "component": self.component,
            "severity": [s.value for s in self.severity] if self.severity else None,
            "status": [s.value for s in self.status] if self.status else None,
            "source": [s.value for s in self.source] if self.source else None,
            "text_search": self.text_search,
            "limit": self.limit,
            "offset": self.offset
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'VulnerabilityDatabaseQuery':
        """
        Create from dictionary
        """
        severity = None
        if data.get("severity"):
            severity = [SeverityLevel(s) for s in data["severity"]]
        
        status = None
        if data.get("status"):
            status = [VulnerabilityStatus(s) for s in data["status"]]
        
        source = None
        if data.get("source"):
            source = [VulnerabilitySource(s) for s in data["source"]]
        
        return cls(
            cve_id=data.get("cve_id"),
            component=data.get("component"),
            severity=severity,
            status=status,
            source=source,
            text_search=data.get("text_search"),
            limit=data.get("limit", 100),
            offset=data.get("offset", 0)
        )

class VulnerabilityDatabaseStats:
    """
    Statistics about the vulnerability database
    """
    def __init__(
        self,
        total_vulnerabilities: int,
        by_severity: Dict[SeverityLevel, int],
        by_status: Dict[VulnerabilityStatus, int],
        by_source: Dict[VulnerabilitySource, int],
        last_updated: datetime
    ):
        self.total_vulnerabilities = total_vulnerabilities
        self.by_severity = by_severity
        self.by_status = by_status
        self.by_source = by_source
        self.last_updated = last_updated
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "total_vulnerabilities": self.total_vulnerabilities,
            "by_severity": {s.value: count for s, count in self.by_severity.items()},
            "by_status": {s.value: count for s, count in self.by_status.items()},
            "by_source": {s.value: count for s, count in self.by_source.items()},
            "last_updated": self.last_updated.isoformat()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'VulnerabilityDatabaseStats':
        """
        Create from dictionary
        """
        by_severity = {SeverityLevel(s): count for s, count in data["by_severity"].items()}
        by_status = {VulnerabilityStatus(s): count for s, count in data["by_status"].items()}
        by_source = {VulnerabilitySource(s): count for s, count in data["by_source"].items()}
        
        return cls(
            total_vulnerabilities=data["total_vulnerabilities"],
            by_severity=by_severity,
            by_status=by_status,
            by_source=by_source,
            last_updated=datetime.fromisoformat(data["last_updated"])
        )

class VulnerabilityDatabaseUpdateRequest:
    """
    Request to update the vulnerability database
    """
    def __init__(
        self,
        sources: List[VulnerabilitySource],
        force_update: bool = False,
        metadata: Optional[Dict[str, Any]] = None
    ):
        self.sources = sources
        self.force_update = force_update
        self.metadata = metadata or {}
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "sources": [s.value for s in self.sources],
            "force_update": self.force_update,
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'VulnerabilityDatabaseUpdateRequest':
        """
        Create from dictionary
        """
        sources = [VulnerabilitySource(s) for s in data["sources"]]
        
        return cls(
            sources=sources,
            force_update=data.get("force_update", False),
            metadata=data.get("metadata", {})
        )
