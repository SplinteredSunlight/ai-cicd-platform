from enum import Enum
from typing import List, Dict, Any, Optional
from datetime import datetime
import uuid

class SeverityLevel(str, Enum):
    """
    Severity levels for vulnerabilities
    """
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    INFO = "INFO"
    UNKNOWN = "UNKNOWN"

class SecurityScanRequest:
    """
    Request for a security scan
    """
    def __init__(
        self,
        repository_url: str,
        commit_sha: str,
        scan_type: List[str],
        artifact_url: Optional[str] = None,
        blocking_severity: Optional[SeverityLevel] = None,
        metadata: Optional[Dict[str, Any]] = None
    ):
        self.repository_url = repository_url
        self.commit_sha = commit_sha
        self.scan_type = scan_type
        self.artifact_url = artifact_url
        self.blocking_severity = blocking_severity
        self.metadata = metadata or {}
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "repository_url": self.repository_url,
            "commit_sha": self.commit_sha,
            "scan_type": self.scan_type,
            "artifact_url": self.artifact_url,
            "blocking_severity": self.blocking_severity.value if self.blocking_severity else None,
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SecurityScanRequest':
        """
        Create from dictionary
        """
        blocking_severity = None
        if data.get("blocking_severity"):
            blocking_severity = SeverityLevel(data["blocking_severity"])
        
        return cls(
            repository_url=data["repository_url"],
            commit_sha=data["commit_sha"],
            scan_type=data["scan_type"],
            artifact_url=data.get("artifact_url"),
            blocking_severity=blocking_severity,
            metadata=data.get("metadata", {})
        )

class SBOMRequest:
    """
    Request for generating a Software Bill of Materials (SBOM)
    """
    def __init__(
        self,
        repository_url: str,
        commit_sha: str,
        format: str = "cyclonedx",
        metadata: Optional[Dict[str, Any]] = None
    ):
        self.repository_url = repository_url
        self.commit_sha = commit_sha
        self.format = format
        self.metadata = metadata or {}
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "repository_url": self.repository_url,
            "commit_sha": self.commit_sha,
            "format": self.format,
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SBOMRequest':
        """
        Create from dictionary
        """
        return cls(
            repository_url=data["repository_url"],
            commit_sha=data["commit_sha"],
            format=data.get("format", "cyclonedx"),
            metadata=data.get("metadata", {})
        )

class SecurityScanResponse:
    """
    Response from a security scan
    """
    def __init__(
        self,
        scan_id: str,
        repository_url: str,
        commit_sha: str,
        scan_type: List[str],
        passed: bool,
        report: Dict[str, Any],
        timestamp: Optional[datetime] = None,
        metadata: Optional[Dict[str, Any]] = None
    ):
        self.scan_id = scan_id
        self.repository_url = repository_url
        self.commit_sha = commit_sha
        self.scan_type = scan_type
        self.passed = passed
        self.report = report
        self.timestamp = timestamp or datetime.utcnow()
        self.metadata = metadata or {}
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "scan_id": self.scan_id,
            "repository_url": self.repository_url,
            "commit_sha": self.commit_sha,
            "scan_type": self.scan_type,
            "passed": self.passed,
            "report": self.report,
            "timestamp": self.timestamp.isoformat(),
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SecurityScanResponse':
        """
        Create from dictionary
        """
        return cls(
            scan_id=data["scan_id"],
            repository_url=data["repository_url"],
            commit_sha=data["commit_sha"],
            scan_type=data["scan_type"],
            passed=data["passed"],
            report=data["report"],
            timestamp=datetime.fromisoformat(data["timestamp"]),
            metadata=data.get("metadata", {})
        )

class Vulnerability:
    """
    A security vulnerability
    """
    def __init__(
        self,
        id: str,
        title: str,
        description: str,
        severity: SeverityLevel,
        cvss_score: Optional[float] = None,
        cve_id: Optional[str] = None,
        affected_components: Optional[List[str]] = None,
        affected_versions: Optional[List[str]] = None,
        fixed_versions: Optional[List[str]] = None,
        references: Optional[List[str]] = None,
        remediation_advice: Optional[str] = None,
        discovered_at: Optional[datetime] = None,
        metadata: Optional[Dict[str, Any]] = None
    ):
        self.id = id
        self.title = title
        self.description = description
        self.severity = severity
        self.cvss_score = cvss_score
        self.cve_id = cve_id
        self.affected_components = affected_components or []
        self.affected_versions = affected_versions or []
        self.fixed_versions = fixed_versions or []
        self.references = references or []
        self.remediation_advice = remediation_advice
        self.discovered_at = discovered_at or datetime.utcnow()
        self.metadata = metadata or {}
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary
        """
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
            "severity": self.severity.value,
            "cvss_score": self.cvss_score,
            "cve_id": self.cve_id,
            "affected_components": self.affected_components,
            "affected_versions": self.affected_versions,
            "fixed_versions": self.fixed_versions,
            "references": self.references,
            "remediation_advice": self.remediation_advice,
            "discovered_at": self.discovered_at.isoformat(),
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Vulnerability':
        """
        Create from dictionary
        """
        return cls(
            id=data["id"],
            title=data["title"],
            description=data["description"],
            severity=SeverityLevel(data["severity"]),
            cvss_score=data.get("cvss_score"),
            cve_id=data.get("cve_id"),
            affected_components=data.get("affected_components", []),
            affected_versions=data.get("affected_versions", []),
            fixed_versions=data.get("fixed_versions", []),
            references=data.get("references", []),
            remediation_advice=data.get("remediation_advice"),
            discovered_at=datetime.fromisoformat(data["discovered_at"]),
            metadata=data.get("metadata", {})
        )
